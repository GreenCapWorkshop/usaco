tag: back_tracking
include: ../../usaco.def
page: moocast_silver, basic_frame
    module: cpp
    namespace: std

    $global N: int
    &call open_In
        $call scan_int, N

        $struct(cow) int x, int y, int p
        $my struct cow cows[N]
        $for i=0:N
            $call scan_int, cows[i].x,cows[i].y, cows[i].p
    $dump N
    # $dump cows[2].x, cows[2].y, cows[2].p

    $global int M[200][200]

    $for i=0:N
        $for j=0:N
            $if $(D:i,j) <= cows[i].p^2
                M[i][j]=1
            $else
                M[i][j]=0
    # $call dump_M

    $call get_max_reach

    $dump n_max
    &call open_Out
        $print $n_max

    # ---------------
    subcode: dump_M
        $for i=0:N
            $print $i: -
            $for j=0:N
                $if M[i][j]
                    $print "$j -"
            $print

macros:
    D: (cows[$1].x-cows[$2].x)^2 + (cows[$1].y-cows[$2].y)^2

#----------------------------------------------- 
subcode: get_max_reach
    n_max=0
    $for i=0:N
        $(if:0)
            $my int Reach[N]
            $for j=0:N
                Reach[j]=-1
            n = get_Reach(i, Reach)
        $(else)
            n = get_Reach(i)
        $if n_max<n
            n_max=n

fncode: get_Reach(i)
    count = 0
    $call @init_cache
    $my $(T_vn) stack
    stack.push_back(i)
    L[i] = 1
    count ++ 
    $while stack.size()>0
        i = stack.back()
        stack.pop_back()
        $for j=0:N
            $if M[i][j]
                $if L[j]==0
                    stack.push_back(j)
                    L[j] = 1
                    count++
    return count

    subcode: init_cache
        $my int L[N]
        $for i=0:N
            L[i] = 0


fncode: get_Reach_recursive(i, int* L)
    $my n=1
    L[i] = 0
    $for j=0:N
        $if M[i][j]
            $if L[j]==-1
                n += get_Reach(j, L)
            $elif L[j]==0
                NOOP
            $else 
                n += L[i]
    return n

