include: ../../usaco.def
page: moocast_gold, basic_frame
    module: cpp
    &call open_In
        $call scan_Int, N
        $my int x_list[N], int y_list[N]
        $for i=0:N
            $call scan_int, x_list[i], y_list[i]

    $my int M[N*N]
    $for i=0:N
        $for j=i+1:N
            n = (x_list[i]-x_list[j])^2 + (y_list[i]-y_list[j])^2
            M[i*N+j]=n
            M[j*N+i]=n

    $call try_1
    &call open_Out
        $print $n_max

subcode: try_1 # dijkstra
    $my int L[N]
    $for i=0:N
        L[i] = 0

    &call stack_map
        $call push, 0
        $while stack.size()>0
            $call pop, i
            $for j=0:N
                $if j!=i
                    $my int t = L[i]
                    $if t<M[i*N+j]
                        t=M[i*N+j]
                    $if L[j]==0 || L[j]>t 
                        L[j] = t
                        $call push, j
    $my n_max = 0
    $for i=0:N
        $call update_max, n_max, L[i]

subcode: stack_map
    $my std::set<int> stack
    BLOCK

    subcode: push(i)
        stack.insert($(i))

    subcode: pop(i)
        $my auto it=stack.begin()
        i = *it
        stack.erase(it)

