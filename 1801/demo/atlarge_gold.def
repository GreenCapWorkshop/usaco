include: ../../usaco.def
page: atlarge_gold, basic_frame
    module: cpp

    &call open_In
        $call scan_Int, N, K
        K--
        # ----
        n = N-1
        $my std::pair<int,int> Edges[n*2]
        $for i=0:N-1
            $call scan_Int, i_a, i_b
            i_a--
            i_b--
            Edges[i].first = i_a
            Edges[i].second = i_b
            Edges[i+n].first = i_b
            Edges[i+n].second = i_a
    std::sort(Edges, Edges+n*2)
    # $foreach t in Edges
    #     $dump t.first, t.second

    $my int Levels[N]
    $for i=0:N
        Levels[i]=-1
    $my int pointers[N]
    $for i=0:N
        pointers[i] = i
    # ---- Construct Tree ---------
    $my std::vector<int> leaf_nodes
    $my std::vector<int> stack
    stack.push_back(K)
    Levels[K]=0
    $while stack.size()>0
        i = stack.back()
        stack.pop_back()
        i_e = bin_search(Edges, n*2, i)
        # assert(i_e>=0)
        $my int count = 0
        $while i_e<n*2 && Edges[i_e].first == i; i_e++
            j = Edges[i_e].second
            $if Levels[j]==-1
                Levels[j]=Levels[i]+1
                pointers[j] = i
                stack.push_back(j)
                count++
        $if count == 0
            leaf_nodes.push_back(i)
    # ---- Leaf Equivallency ---------
    $for i=0:leaf_nodes.size()
        $(set:i=leaf_nodes[i])
        n_up = Levels[$(i)]/2
        $for j=0:n_up
            $(i) = pointers[$(i)]
    # ---- Count non-duplicate -------
    $my int Guarded[N]
    $for i=0:N
        Guarded[i] = 0
    $for i=0:leaf_nodes.size()
        $(set:i=leaf_nodes[i])
        Guarded[$(i)]=1

    $my int count = 0
    $for i=0:leaf_nodes.size()
        j = leaf_nodes[i]
        $if Guarded[j]==2
            continue
        $else
            Guarded[j]=2

        is_needed = true
        $while j!=K
            j = pointers[j]
            $if Guarded[j]
                is_needed=false
                break
        $if is_needed
            count++
    # -------------------------
    &call open_Out
        $print $count





fncode: bin_search(std::pair<int,int> * L, int n, int k):int
    i1= 0
    i2= n-1
    $if k<L[i1].first
        return -1
    $if k>L[i2].first
        return -1
    $while i1<=i2
        i3 = (i1+i2)/2
        $if L[i3].first <k
            i1 = i3+1
        $else
            i2 = i3-1
    return i1


