include: ../../usaco.def

page: cbarn_silver, basic_frame
    module: cpp

    &call open_In
        $local N: int
        $call scan_int, N
        
        $my int C[N]
        $for i=0:N
            $call scan_int, C[i]

    $struct(T) int i, int n
    $my std::vector<T> groups
    $call get_groups
    $call merge_groups
    $call get_square_sum

    &call open_Out
        $print $sum

subcode: get_groups
    j = 0
    i0 = 0
    $for i=0:N
        $if C[i]>0
            $if j<=i
                $if j>i0
                    groups.push_back((struct T){i0, j-i0})
                j = i
                i0 = i
            j += C[i]
    $if j>i0
        groups.push_back((struct T){i0, j-i0})
    n_groups = groups.size()

    # $call dump_groups

subcode: dump_groups
    $dump n_groups
    $for i=0:n_groups
        $dump groups[i].i, groups[i].n

subcode: merge_groups
    $while n_groups>1
        # $call dump_groups
        groups[0].i = groups[n_groups-1].i
        groups[0].n += groups[n_groups-1].n
        n_groups--
        j=groups[0].i + groups[0].n - N
        i=1
        $while i<n_groups; i++
            $if j>=groups[i].i
                groups[i].i = -1
                groups[0].n += groups[i].n
                j+=groups[i].n
            $else
                break
        $if i>1
            n_groups -= (i-1)
            $for i2=1:n_groups
                groups[i2] = groups[i2+i-1]
    # $call dump_groups

subcode: get_square_sum
    sum = 0
    j = groups[0].i
    $for i=0:N
        i2 = (groups[0].i + i) % N
        $if C[i2] > 0
            $for k=0:C[i2]
                d = j - i2
                $if d<0
                    d+=N
                sum += d*d
                j++
                $if j>=N
                    j-=N

    $dump sum
