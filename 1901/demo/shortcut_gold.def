tag: backtracking, dijkstra
include: ../../usaco.def
page: shortcut_gold, basic_frame
    module: cpp

    &call open_In
        $call scan_Int, N,M,T
        $my int c_list[N]
        $for i=0:N
            $call scan_int, c_list[i]
        $my int a_list[M], int b_list[M], int t_list[M]
        $for i=0:M
            $call scan_int, a_list[i], b_list[i], t_list[i]
            a_list[i]--
            b_list[i]--
    #---------------------------------------- 
    $my $(T_vn2) paths[N]
    $for i=0:M
        $(set:a=a_list[i])
        $(set:b=b_list[i])
        paths[$(a)].push_back({$(b), t_list[i]})
        paths[$(b)].push_back({$(a), t_list[i]})
    #---------------------------------------- 
    $call get_shortest_path_cost_dir_list
    #---------------------------------------- 
    $my int tmp_list[N]
    $for i=0:N
        tmp_list[i]=0
    $for i=0:N
        tmp_list[dir_list[i]]++

    $my int cows_list[N]
    $for i=0:N
        cows_list[i] = c_list[i]

    $my $(T_vn) stack2
    $for i=0:N
        $if tmp_list[i]==0
            stack2.push_back(i)
    $while stack2.size()>0
        $my int i = stack2.back()
        stack2.pop_back()
        $(set:j=dir_list[i])
        cows_list[$(j)] += cows_list[i]
        tmp_list[$(j)]--
        $if tmp_list[$(j)]==0
            stack2.push_back($(j))

    #---------------------------------------- 
    $my ll_max=(long long)0
    $for i=0:N
        $my ll_saving = (long long)cows_list[i]*(cost_list[i]-T)
        $call update_max, ll_max, ll_saving

    $dump ll_max
    &call open_Out
        $print "%lld", ll_max

#-----------------------------------
subcode: get_shortest_path_cost_dir_list
    $my int cost_list[N]
    $for i=0:N
        cost_list[i] = 0

    $my int dir_list[N]
    $for i=0:N
        dir_list[i]=0

    # &call stack_simple
    &call stack_map
        $call init_stack
        $call push, 0, 0

        $while stack.size()>0
            $call pop
            &call each_path_of_i
                $(set:C0=cost_list[$(j)])
                $(set:C1=cost+$(t))
                $if $(C0)==0|| $(C1)<$(C0) ||($(C1)==$(C0) && i<dir_list[$(j)])
                    dir_list[$(j)] = i
                    cost_list[$(j)]=cost+$(t)
                    $call push, $(j), cost+$(t)

    # -----------------------
    subcode: each_path_of_i
        $foreach it in paths[i]
            $(set:j=it.first)
            $(set:t=it.second)
            $if $(j)!=0
                BLOCK
    # -----------------------
subcode: stack_map
    BLOCK
    subcode: init_stack
        # cost, i
        $my std::set<std::pair<int,int>> stack

    subcode: push(i, cost)
        stack.insert({$(cost), $(i)})

    subcode: pop
        $my auto it=stack.begin()
        $my i, int cost
        i = it->second
        cost = it->first
        stack.erase(it)


subcode: stack_simple
    BLOCK
    subcode: init_stack
        $my $(T_vn2) stack

    subcode: push(i, cost)
        stack.push_back({$(i),$(cost)})

    subcode: pop
        $my i, int cost
        i = stack.back().first
        cost = stack.back().second
        stack.pop_back()

